#!/usr/bin/env bash

# MIT License
#
# Copyright (c) 2019 Holger Arndt
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

function show_help_general() {
  echo "elasticsearch-cli version 0.13"
  echo "Copyright (C) 2019 by Holger Arndt"
  echo "Web site: https://holger-arndt.com/elasticsearch-cli"
  echo
  echo "elastic is a command line tool to use Elasticsearch without having to remember"
  echo "all the complicated GET and POST requests."
  echo
  echo "Usage: elastic [OPTIONS] COMMAND SUBCOMMAND PARAMETERS"
  echo
  echo "OPTIONS:"
  echo "  --mapping=FILE   mapping file to use when creating an index"
  echo "  --mappings=FILE  mapping file to use when creating an index"
  echo "  --replica=NUM    setting for number of replicas when creating a new index"
  echo "  --replicas=NUM   setting for number of replicas when creating a new index"
  echo "  --settings=FILE  setting file to use when creating an index"
  echo "  --size=NUM       maximum number of results to return, defaults to 1000"
  echo "  --script=STRING  inline script to use for context processing; pay attention"
  echo "                   to correctly escape quotes, for example like this:"
  echo "                   --script='ctx._source.new=ctx._source.remove(\\\"old\\\");'"
  echo "  --schards=NUM    setting for number of shards when creating a new index"
  echo "  --timeout=NUM    maximum time to wait for results, defaults to 60 seconds"
  echo "  --url=STRING     base URL of Elasticsearch node, defaults to"
  echo "                   http://localhost:9200"
  echo
  echo "COMMANDS:"
  echo "  alias, aliases   create or delete aliases for an index"
  echo "  allocation       manage allocation of shards and replicas"
  echo "  cluster          information and administration of the cluster"
  echo "  color, colour    show the color of the cluster status [green|red|yellow]"
  echo "  delete           delete aliases or indices"
  echo "  dump, export     export index data, mapping or settings"
  echo "  health           show health status of the cluster"
  echo "  help             show help information for commands"
  echo "  index, indices   create, delete or manage indices"
  echo "  list             list aliases, indices, nodes or plugins"
  echo "  master           information and administration of the master node"
  echo "  node, nodes      information about the nodes in the cluster"
  echo "  plugin, plugins  information about installed plugins"
  echo "  reindex          copy data from one index into another"
  echo "  query, search    perform a query on Elasticsearch"
  echo "  shard, shards    information and administration of shards"
  echo "  status           display information about the cluster status"
  echo "  sql              use SQL to query Elasticsearch"
  echo "  task, tasks      information and management of tasks"
  echo "  version          show Elasticsearch version"
  echo
  echo "SUBCOMMANDS:"
  echo "  Use 'elastic help COMMAND' to display the list of available SUBCOMMANDS."
  echo
  echo "EXAMPLES:"
  echo "  elastic cluster health         display cluster health information"
  echo "  elastic allocation explain     display problems while allocating shards"
  echo "  elastic shard allocation none  disable shard allocation before updating a node"
  echo "  elastic shard allocation all   enable shard allocation"
  echo
  echo "If you find this script useful, please consider making a donation:"
  echo "  elastic donate                 display the link to donate via PayPal"
  echo
  echo "Thanks a lot for your support!"
  exit 1
}

###############################################################################
# Helper Functions
###############################################################################

function configure_defaults() {
  HEADER="Content-Type: application/json"
  CURL="curl -s"

  size=1000
  timeout=60
  url="http://localhost:9200"
}

function check_dependencies() {
  if ! type "curl" &>/dev/null; then
    echo "Error: This script requires the program curl for communication with Elasticsearch"
    exit 1
  fi

  if ! type "jq" &>/dev/null; then
    echo "Error: This script requires the program jq for parsing json"
    exit 1
  fi

  if ! type "sed" &>/dev/null; then
    echo "Error: This script requires the program sed for search and replace"
    exit 1
  fi
}

function load_mappings() {
  file="$1"
  if [ ! -f "${file}" ]; then
    echo "Error: File does not exist: ${file}"
    exit 1
  fi
  mappings=$( cat "${file}" | jq '.[].mappings')
}

function load_settings() {
  file="$1"
  if [ ! -f "${file}" ]; then
    echo "Error: File does not exist: ${file}"
    exit 1
  fi
  settings=$(cat "${file}" | jq '.[].settings' | jq 'del(.index["creation_date","provided_name","uuid","version"])')
}

###############################################################################
# Display Help for Functions
###############################################################################

function show_help_alias() {
  echo "Usage: elastic alias [add|create|delete|drop|list|new|remove|rm|status]"
  exit 1
}

function show_help_alias_create() {
  echo "Usage: elastic alias create INDEX ALIAS"
  exit 1
}

function show_help_alias_delete() {
  echo "Usage: elastic alias delete INDEX ALIAS"
  exit 1
}

function show_help_alias_status() {
  echo "Usage: elastic alias status"
  exit 1
}

function show_help_allocation() {
  echo "Usage: elastic allocation [retry]"
  exit 1
}

function show_help_cluster() {
  echo "Usage: elastic cluster [allocation|color|colour|health|name|settings|state|status|version]"
  exit 1
}

function show_help_color() {
  echo "Usage: elastic color"
  exit 1
}

function show_help_delete() {
  echo "Usage: elastic delete [alias|index]"
  echo
  echo "delete alias       remove an alias for an index"
  echo "delete index       remove an index from Elasticsearch"
  exit 1
}

function show_help_dump() {
  echo "Usage: elastic dump"
  exit 1
}

function show_help_health() {
  echo "Usage: elastic help"
  exit 1
}

function show_help_index() {
  echo "Usage: elastic index [add|close|copy|create|delete|drop|exists|getmapping|list|new|open|readonly|reindex|remove|replica|replicas|status] index"
  exit 1
}

function show_help_list() {
  echo "Usage: elastic list [alias|index|node|plugin]"
  exit 1
}

function show_help_master() {
  echo "Usage: elastic master [name|status]"
  exit 1
}

function show_help_node() {
  echo "Usage: elastic node [data|info|list|name|status|total]"
  exit 1
}

function show_help_plugin() {
  echo "Usage: elastic plugin [list|status]"
  exit 1
}

function show_help_reindex() {
  echo "Usage: elastic reindex SOURCE_INDEX TARGET_INDEX"
  exit 1
}

function show_help_search() {
  echo "Usage: elastic search QUERY"
  exit 1
}

function show_help_shard() {
  echo "Usage: elastic shard [allocation|exclude|initializing|primary|rebalance|relocating|status|total|unassigned]"
  exit 1
}

function show_help_status() {
  echo "Usage: elastic status"
  exit 1
}

function show_help_sql() {
  echo "Usage: elastic sql QUERY"
  echo "       cat myquery.sql | elastic sql"
  echo
  echo "Don't forget to escape field and index names if required, otherwise you will get an error."
  echo "Example: elastic sql \"SELECT COUNT(*) FROM \\\"my_index\\\"\""
  exit 1
}

function show_help_task() {
  echo "Usage: elastic task [abort|cancel|kill|list|status|stop|terminate]"
  exit 1
}

function show_help_version() {
  echo "Usage: elastic version"
  exit 1
}

###############################################################################
# Parse Functions for Commands
###############################################################################

function parse_alias_command() {
  command="$1"
  shift

  case "${command}" in

  add | create | new) handle_alias_create "$@" ;;
  delete | drop | remove | rm) handle_alias_delete "$@" ;;
  list | status) handle_alias_status "$@" ;;
  *) show_help_alias "$@" ;;

  esac
  exit 1
}

function parse_allocation_command() {
  command="$1"
  shift

  case "${command}" in

  include) handle_allocation_include "$@" ;;
  retry) handle_allocation_retry "$@" ;;
  *) show_help_allocation "$@" ;;

  esac
  exit 1
}

function parse_cluster_command() {
  command="$1"
  shift

  case "${command}" in

  allocation) handleClusterAllocation "$@" ;;
  color | colour) handleClusterStatus "$@" ;;
  health) handleClusterHealth "$@" ;;
  name) handleClusterName "$@" ;;
  settings) handleClusterSettings "$@" ;;
  state) handleClusterState "$@" ;;
  status) handleClusterStatus "$@" ;;
  version) handleClusterVersion "$@" ;;
  *) showHelpCluster "$@" ;;

  esac
  exit 1
}

function parse_color_command() {
  handleClusterStatus "$@"
  exit 1
}

function parse_delete_command() {
  command="$1"
  shift

  case "${command}" in

  alias) handleAliasDelete "$@" ;;
  index) handleIndexDelete "$@" ;;
  *) showHelpDelete "$@" ;;

  esac
  exit 1
}

function parse_dump_command() {
  command="$1"
  shift

  case "${command}" in

  mapping) handle_dump_mapping "$@" ;;
  index) handle_dump_index "$@" ;;
  settings) handle_dump_settings "$@" ;;
  *) show_help_dump "$@" ;;

  esac
  exit 1
}

function parse_health_command() {
  handleClusterHealth "$@"
}

function parse_help_command() {
  command="$1"
  shift

  case "command" in

  alias | aliases) show_help_alias "$@" ;;
  allocation) show_help_allocation "$@" ;;
  cluster) show_help_cluster "$@" ;;
  color | colour) show_help_color "$@" ;;
  delete) show_help_delete "$@" ;;
  donate | donation) process_donation_command ;;
  dump | export) show_help_dump "$@" ;;
  health) show_help_health "$@" ;;
  index | indices) show_help_index "$@" ;;
  master) show_help_master "$@" ;;
  node | nodes) show_help_node "$@" ;;
  plugin | plugins) show_help_plugin "$@" ;;
  reindex) show_help_reindex "$@" ;;
  query | search) show_help_search "$@" ;;
  shard | shards) show_help_shard "$@" ;;
  status) show_help_status "$@" ;;
  sql) show_help_sql "$@" ;;
  task | tasks) show_help_task "$@" ;;
  version) show_help_version "$@" ;;
  *) show_help_general "$@" ;;

  esac
  exit 1
}

function parse_index_command() {
  command="$1"
  shift

  case "${command}" in

  add | create | new) hanlde_index_create "$@" ;;
  close) hanlde_index_close "$@" ;;
  copy | reindex) handle_index_copy "$@" ;;
  delete | drop | remove | rm) handle_index_delete "$@" ;;
  exists) handle_index_exists "$@" ;;
  getmapping) handle_dump_mapping "$@" ;;
  list) handle_index_list "$@" ;;
  open) handle_index_open "$@" ;;
  readonly) handle_index_readonly "$@" ;;
  replica | replicas) handle_index_replica "$@" ;;
  status) handle_index_status "$@" ;;
  *) show_help_index "$@" ;;

  esac
  exit 1
}

function parse_master_command() {
  command="$1"
  shift

  case "${command}" in

  name) handleMasterName "$@" ;;
  status) handleMasterStatus "$@" ;;
  *) showHelpMaster "$@" ;;

  esac
  exit 1
}

function parse_node_command() {
  command="$1"
  shift

  case "${command}" in

  count) handleNodeCount "$@" ;;
  data) handleNodeData "$@" ;;
  info) handleNodeInfo "$@" ;;
  list) handleNodeList "$@" ;;
  master) handleMasterName "$@" ;;
  name) handleNodeName "$@" ;;
  status) handleNodeStatus "$@" ;;
  total) handleNodeCount "$@" ;;
  *) showHelpNode "$@" ;;

  esac
  exit 1
}

function parse_plugin_command() {
  command="$1"
  shift

  case "${command}" in

  list | status)
    ${CURL} ${URL}/_cat/plugins?format=json | jq '.'
    ;;

  *) showHelpPlugin "$@" ;;

  esac
  exit 1
}

function parse_shard_command() {
  command="$1"
  shift

  case "${command}" in

  allocation) handle_shard_allocation "$@" ;;
  exclude) handle_shard_exclude "$@" ;;
  initializing) handle_shard_initializing "$@" ;;
  primary) handle_shard_primary "$@" ;;
  rebalance) handle_shard_rebalance "$@" ;;
  relocating) handle_shard_relocating "$@" ;;
  status) handle_shard_status "$@" ;;
  total) handle_shard_total "$@" ;;
  unassigned) handle_shard_unassigned "$@" ;;
  *) show_help_shard "$@" ;;

  esac
  exit 1
}

function parse_task_command() {
  command="$1"
  shift

  case "${command}" in

  abort | cancel | kill | stop | terminate) handleTaskCancel "$@" ;;
  list | status) handleTaskList "$@" ;;
  *) showHelpTask ;;

  esac

  exit 1
}

###############################################################################
# Process Commands
###############################################################################

function handle_alias_create() {
  INDEX="$1"
  ALIAS="$2"

  if [[ -z "${INDEX}" ]]; then
    echo "Error: No index defined"
    showHelpAliasCreate
  fi
  if [[ -z "${ALIAS}" ]]; then
    echo "Error: No alias defined"
    showHelpAliasCreate
  fi

  ${CURL} -X POST ${url}/_aliases?format=json -d '{"actions": [{"add": {"index": "'"${INDEX}"'", "alias": "'"${ALIAS}"'" }}]}' -H "${HEADER}" | jq '.'
  exit 0
}

function handle_alias_delete() {
  INDEX="$1"
  ALIAS="$2"

  if [[ -z "${INDEX}" ]]; then
    echo "Error: No index defined"
    showHelpAliasDelete
  fi

  if [[ -z "${ALIAS}" ]]; then
    echo "Error: No alias defined"
    showHelpAliasDelete
  fi

  ${CURL} -X POST ${url}/_aliases?format=json -d '{"actions": [{"remove": {"index": "'${INDEX}'", "alias": "'${ALIAS}'" }}]}' -H "${HEADER}" | jq '.'
  exit 0
}

function handle_alias_status() {
  ${CURL} ${url}/_cat/aliases?format=json | jq '.'
  exit 0
}

function handle_allocation_include() {
  #  "index.routing.allocation.include._name": "node1"
  echo "Error: Not implemented yet"
  exit 1
}

function handle_allocation_retry() {
  ${CURL} -X POST ${url}/_cluster/reroute?retry_failed=true | jq '.'
  exit 0
}

function handle_cluster_allocation() {
  ${CURL} ${url}/_cluster/allocation/explain | jq '.'
  exit 0
}

function handle_cluster_health() {
  ${CURL} ${url}/_cluster/health?format=json | jq '.'
  exit 0
}

function handle_cluster_name() {
  ${CURL} ${url}/_cluster/health?format=json | jq -r '.cluster_name'
  exit 0
}

function handle_cluster_settings() {
  ${CURL} ${url}/_cluster/settings?format=json | jq '.'
  exit 0
}

function handle_cluster_state() {
  ${CURL} ${url}/_cluster/state?format=json | jq '.'
  exit 0
}

function handle_cluster_status() {
  ${CURL} ${url}/_cluster/health?format=json | jq -r '.status'
  exit 0
}

function handle_cluster_version() {
  ${CURL} ${URurlL}/ | jq -r '.version.number'
  exit 0
}

function process_donation_command() {
  echo "I'm very happy, that you find this script useful."
  echo "If you would like to make a donation to support this project, please use the"
  echo "link below which will redirect you to PayPal:"
  echo
  echo "https://www.paypal.com/cgi-bin/webscr?item_name=elastic-cli&cmd=_donations&business=paypal@arndt.ai"
  echo
  echo "Thanks a lot for your support!"
  exit 0
}

function handle_dump_index() {
  INDEX="$1"

  if [[ -z "${INDEX}" ]]; then
    echo "Error: No index defined"
    exit 1
  fi

  echo "["
  DATA=$(${CURL} -X POST "${url}/${INDEX}/_search?scroll=1m" -H "${HEADER}" -d '{"size": '${SIZE}', "query": { "match_all": {} } }')
  SCROLLID=$(echo $DATA | jq -r "._scroll_id")

  while ! [[ $DATA =~ "\"hits\":[]" ]]; do
    if [[ $COMMA ]]; then
      echo ","
    else
      COMMA=true
    fi

    echo $DATA | jq -M -r -a -c ".hits.hits" | sed 's/^.//' | sed 's/.$//' &
    PID=$!

    DATA=$(${CURL} -X POST "${url}/_search/scroll" -H "${HEADER}" -d '{ "scroll" : "1m", "scroll_id" : "'$SCROLLID'" }')
    wait $PID

  done

  echo "]"
  exit 0
}

function handle_dump_mapping() {
  if [[ -z "$1" ]]; then
    echo "Error: No index defined"
    exit 1
  fi

  ${CURL} -X GET ${url}/$1/_mapping/?format=json | jq '.'
  exit 0
}

function handle_dump_settings() {
  if [[ -z "$1" ]]; then
    echo "Error: No index defined"
    exit 1
  fi

  ${CURL} -X GET ${url}/$1/_settings/?format=json | jq '.'
  exit 0
}

function handle_import() {
  # jq -nc --stream 'fromstream(1|truncate_stream(inputs))'
  echo "Error: Not implemented yet"
  exit 1
}

function hanlde_index_close() {
  if [[ -z "$1" ]]; then
    echo "Error: No index defined"
    exit 1
  fi

  ${CURL} -X POST ${url}/$1/_close?format=json | jq '.'
  exit 0
}

function handle_index_copy() {
  if [[ -z "$1" ]]; then
    echo "Error: No source index defined"
    exit 1
  fi

  if [[ -z "$2" ]]; then
    echo "Error: No target index defined"
    exit 1
  fi

  if [[ -z "$3" ]]; then
    ${CURL} -X POST ${url}/_reindex/?format=json -d '{"source": {"index": "'$1'"}, "dest": {"index": "'$2'"}}' -H "${HEADER}" | jq '.'
  else
    ${CURL} -X POST ${url}/_reindex/?format=json -d '{"source": {"index": "'$1'"}, "dest": {"index": "'$2'"}, "script": {"inline": "'"$3"'"} }' -H "${HEADER}" | jq '.'
  fi

  exit 0
}

function hanlde_index_create() {
  if [[ -z "$1" ]]; then
    echo "Error: No index defined"
    exit 1
  fi

  if [[ -z "${mappings}" ]]; then
    mappings='{}'
  fi

  if [[ -z "${settings}" ]]; then
    settings='{ '

    if [[ ! -z "${shards}" ]]; then
      settings=${settings}'"index.number_of_shards":'${shards}
      if [[ ! -z "${replicas}" ]]; then
        settings=${settings}','
      fi
    fi

    if [[ ! -z "${replicas}" ]]; then
      settings=${settings}'"index.number_of_replicas":'${replicas}
    fi

    settings=${settings}' }'
  fi

  data='{"settings":'${settings}',"mappings":'${mappings}'}'

  echo $data

  ${CURL} -X PUT ${url}/$1?format=json -d "${data}" -H "${HEADER}" | jq '.'
  exit 0
}

function handle_index_delete() {
  if [[ -z "$1" ]]; then
    echo "Error: No index defined"
    exit 1
  fi

  ${CURL} -X DELETE ${url}/$1?format=json | jq '.'
  exit 0
}

function handle_index_exists() {
  if [[ -z "$1" ]]; then
    echo "Error: No index defined"
    exit 1
  fi

  ${CURL} -X HEAD ${url}/$1
  exit 0
}

function handle_index_list() {
  ${CURL} ${url}/_cat/indices?format=json | jq -r '.[].index'
  exit 0
}

function handle_index_open() {
  if [[ -z "$1" ]]; then
    echo "Error No index defined"
    exit 1
  fi

  ${CURL} -X POST ${url}/$1/_open?format=json | jq '.'
  exit 0
}

function handle_index_readonly() {
  if [[ -z "$1" ]]; then
    echo "Error: No index defined"
    exit 1
  fi

  if [[ -z "$2" ]]; then
    echo "Error: Select true or false"
    exit 1
  fi

  ${CURL} -X PUT ${url}/$1/_settings?format=json -d '{"index": { "blocks": {"read_only_allow_delete": "'$2'" }}}' -H "${HEADER}" | jq '.'
  exit 0
}

function handle_index_replica() {
  if [[ -z "$1" ]]; then
    echo "Error: No index defined"
    exit 1
  fi

  if [[ -z "$2" ]]; then
    echo "Error: No replica count"
    exit 1
  fi

  ${CURL} -X PUT ${url}/$1/_settings?format=json -d '{"index": { "number_of_replicas": '$2' }}' -H "${HEADER}" | jq '.'
  exit 0
}

function handle_index_status() {
  if [[ -z "$1" ]]; then
    ${CURL} ${url}/_cat/indices?format=json | jq '.'
    exit 0
  fi

  ${CURL} ${url}/$1?format=json | jq '.'
  exit 0
}

function handle_master_name() {
  ${CURL} ${url}/_cat/master?format=json | jq -r '.[0].node'
  exit 0
}

function handle_master_status() {
  ${CURL} ${url}/_cat/master?format=json | jq '.'
  exit 0
}

function handle_node_data() {
  ${CURL} ${url}/_cat/health?format=json | jq -r '.[0]."node.data"'
  exit 0
}

function handle_node_info() {
  ${CURL} ${url}/_cat/nodeattrs?format=json | jq '.'
  exit 0
}

function handle_node_list() {
  ${CURL} ${url}/_cat/nodes?format=json | jq -r '.[].name'
  exit 0
}

function handle_node_name() {
  ${CURL} ${url}/ | jq -r '.name'
  exit 0
}

function handle_node_status() {
  ${CURL} ${url}/_cat/nodes?format=json | jq '.'
  exit 0
}

function handle_node_count() {
  ${CURL} ${url}/_cat/health?format=json | jq -r '.[0]."node.total"'
  exit 0
}

function handle_search() {
  if [[ -z "$1" ]]; then
    echo "Error: No query defined"
    echo
    showHelpSearch
  fi

  if [[ -z "$2" ]]; then
    ${CURL} ${url}/_search?q=$1 | jq '.'
    exit 0
  fi

  ${CURL} ${url}/$1/_search?q=$2 | jq '.'
  exit 0
}

function handle_shard_allocation() {
  if [[ -z "$1" ]]; then
    echo "Error: Choose none to disable allocation or null to restart it"
    exit 1
  fi
  if [[ "$1" == "null" ]]; then
    ${CURL} -X PUT ${url}/_cluster/settings?format=json -d '{"persistent": {"cluster.routing.allocation.enable": null}}' -H "${HEADER}" | jq '.'
  else
    ${CURL} -X PUT ${url}/_cluster/settings?format=json -d '{"persistent": {"cluster.routing.allocation.enable": "'$1'"}}' -H "${HEADER}" | jq '.'
  fi
  exit 0
}

function handle_shard_exclude() {
  if [[ -z "$1" ]]; then
    echo "Error: No host defined"
    echo
    exit 1
  fi
  ${CURL} -X PUT ${url}/_cluster/settings?format=json -d '{"transient": {"cluster.routing.allocation.exclude._name": "'$1'"}}' -H "${HEADER}" | jq '.'
  exit 0
}

function handle_shard_initializing() {
  ${CURL} ${url}/_cat/health?format=json | jq -r '.[0].init'
  exit 0
}

function handle_shard_primary() {
  ${CURL} ${url}/_cat/health?format=json | jq -r '.[0].pri'
  exit 0
}

function handle_shard_rebalance() {
  if [[ -z "$1" ]]; then
    echo "Error: No type defined [all|primaries|replicas|none]"
    exit 1
  fi
  ${CURL} -X PUT ${url}/_cluster/settings?format=json -d '{"transient": {"cluster.routing.rebalance.enable": "'$1'"}}' -H "${HEADER}" | jq '.'
  exit 0
}

function handle_shard_relocating() {
  ${CURL} ${url}/_cat/health?format=json | jq -r '.[0].relo'
  exit 0
}

function handle_shard_status() {
  ${CURL} ${url}/_cat/shards?format=json | jq '.'
  exit 0
}

function handle_shard_total() {
  ${CURL} ${url}/_cat/health?format=json | jq -r '.[0].shards'
  exit 0
}

function handle_shard_unassigned() {
  ${CURL} ${url}/_cat/health?format=json | jq -r '.[0].unassign'
  exit 0
}

function handle_sql() {
  if [[ -p /proc/self/fd/0 ]]; then
    QUERY=$(cat - | sed 's/"/\\"/g')
  fi

  if [[ -z "${QUERY}" ]]; then
    QUERY=$(echo "$1" | sed 's/"/\\"/g')
  fi

  if [[ -z "${QUERY}" ]]; then
    echo "Error: No query defined"
    showHelpSql
  fi

  ${CURL} -X POST ${url}'/_sql?&format=txt' -d '{"query": "'"${QUERY}"'", "fetch_size": "'${SIZE}'" }' -H "${HEADER}"
  exit 0
}

function handle_task_cancel() {
  ${CURL} -X POST -H "${HEADER}" ${url}/_tasks/$1/_cancel | jq '.'
  exit 0
}

function handle_task_list() {
  ${CURL} ${url}/_tasks?group_by=parents | jq '.'
  exit 0
}

###############################################################################
# Parse Command Line Arguments and Redirect to Functions
###############################################################################

function parse_options_and_command() {
  for i in "$@"; do
    case $i in
    --mapping=*)
      load_mappings "${i#*=}"
      shift
      ;;
    --mappings=*)
      load_mappings "${i#*=}"
      shift
      ;;
    --replica=*)
      replicas="${i#*=}"
      shift
      ;;
    --replicas=*)
      replicas="${i#*=}"
      shift
      ;;
    --settings=*)
      load_settings "${i#*=}"
      shift
      ;;
    --shards=*)
      shards="${i#*=}"
      shift
      ;;
    --size=*)
      size="${i#*=}"
      shift
      ;;
    --script=*)
      script="${i#*=}"
      shift
      ;;
    --timeout=*)
      timeout="${i#*=}"
      shift
      ;;
    --url=*)
      url="${i#*=}"
      shift
      ;;
    --*)
      echo "Error: Unknown option $i"
      echo
      show_help_general
      ;;
    *) ;;
    esac
  done

  command="$1"
  shift

  case "${command}" in

  alias | aliases) parse_alias_command "$@" ;;
  allocation) parse_allocation_command "$@" ;;
  cluster) parse_cluster_command "$@" ;;
  color | colour) parse_color_command "$@" ;;
  delete) parse_delete_command "$@" ;;
  donate | donation) process_donation_command ;;
  dump | export) parse_dump_command "$@" ;;
  health) parse_health_command "$@" ;;
  help) parse_help_command "$@" ;;
  index | indices) parse_index_command "$@" ;;
  list) parse_list_command "$@" ;;
  master) parse_master_command "$@" ;;
  node | nodes) parse_node_command "$@" ;;
  plugin | plugins) parse_plugin_command "$@" ;;
  reindex) parse_reindex_command "$@" ;;
  query | search) parse_search_command "$@" ;;
  shard | shards) parse_shard_command "$@" ;;
  status) parse_status_command "$@" ;;
  sql) parse_sql_command "$@" ;;
  task | tasks) parse_task_command "$@" ;;
  version) parse_version_command "$@" ;;
  *)
    echo "Error: Unknown command ${command}"
    echo
    show_help_general
    ;;

  esac

  exit 1
}

###############################################################################
# Main Program
###############################################################################

check_dependencies
configure_defaults
parse_options_and_command "$@"

exit 1
